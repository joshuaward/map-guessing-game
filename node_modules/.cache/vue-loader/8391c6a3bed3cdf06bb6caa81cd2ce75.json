{"remainingRequest":"/Users/jward/Vue/map-guessing-game/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jward/Vue/map-guessing-game/node_modules/pug-plain-loader/index.js!/Users/jward/Vue/map-guessing-game/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jward/Vue/map-guessing-game/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jward/Vue/map-guessing-game/src/App.vue?vue&type=template&id=7ba5bd90&lang=pug&","dependencies":[{"path":"/Users/jward/Vue/map-guessing-game/src/App.vue","mtime":1611355836803},{"path":"/Users/jward/Vue/map-guessing-game/node_modules/cache-loader/dist/cjs.js","mtime":1601083934546},{"path":"/Users/jward/Vue/map-guessing-game/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1611355573028},{"path":"/Users/jward/Vue/map-guessing-game/node_modules/pug-plain-loader/index.js","mtime":1611355574216},{"path":"/Users/jward/Vue/map-guessing-game/node_modules/cache-loader/dist/cjs.js","mtime":1601083934546},{"path":"/Users/jward/Vue/map-guessing-game/node_modules/vue-loader/lib/index.js","mtime":1611355573028}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}